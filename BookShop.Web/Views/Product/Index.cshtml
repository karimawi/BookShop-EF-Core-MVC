@model IEnumerable<BookShop.Models.Product>

@{
    ViewData["Title"] = "Products";
    var currentPage = ViewBag.CurrentPage as int? ?? 1;
    var totalPages = ViewBag.TotalPages as int? ?? 1;
    var hasPreviousPage = ViewBag.HasPreviousPage as bool? ?? false;
    var hasNextPage = ViewBag.HasNextPage as bool? ?? false;
    var categoryFilter = ViewBag.CategoryFilter as int?;
    var searchTerm = ViewBag.SearchTerm as string;
    var categoryList = ViewBag.CategoryList as IEnumerable<SelectListItem>;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-book"></i> Products</h1>
    <div class="d-flex align-items-center gap-2">
        <div class="search-container">
            <input type="text" id="searchInput" class="search-input expanded" placeholder="Search products..." />
            <button type="button" id="searchToggle" class="search-toggle">
                <i class="fas fa-search"></i>
            </button>
        </div>
        <div class="dropdown">
            <button class="btn btn-outline-secondary dropdown-toggle filter-btn" type="button" id="categoryFilterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-filter"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-themed" aria-labelledby="categoryFilterDropdown">
                @foreach (var item in categoryList)
                {
                    <li>
                        <a class="dropdown-item @(item.Value == categoryFilter?.ToString() ? "active" : "")" 
                           href="@Url.Action("Index", new { categoryFilter = item.Value == "0" || string.IsNullOrEmpty(item.Value) ? (int?)null : int.Parse(item.Value), page = 1, search = searchTerm })">
                            @item.Text
                        </a>
                    </li>
                }
            </ul>
        </div>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create New Product
        </a>
    </div>
</div>

@if (Model.Any())
{
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th><i class="fas fa-heading"></i> Title</th>
                            <th><i class="fas fa-align-left"></i> Description</th>
                            <th><i class="fas fa-user"></i> Author</th>
                            <th><i class="fas fa-dollar-sign"></i> Price</th>
                            <th><i class="fas fa-tags"></i> Category</th>
                            <th width="120"><i class="fas fa-cogs"></i> Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model)
                        {
                            <tr>
                                <td>@product.Title</td>
                                <td class="position-relative">
                                    @if (product.Description.Length > 50)
                                    {
                                        <span>@product.Description.Substring(0, 50)...</span>
                                        <a href="#" class="text-primary read-more-btn" data-product-id="@product.Id" data-description="@Html.Raw(Html.Encode(product.Description))">read more</a>
                                    }
                                    else
                                    {
                                        @product.Description
                                    }
                                </td>
                                <td>@product.Author</td>
                                <td>$@product.Price.ToString("F2")</td>
                                <td>
                                    <a asp-controller="Category" asp-action="Details" asp-route-id="@product.Category.Id" class="text-decoration-none">
                                        <span class="badge bg-primary">@product.Category.CatName</span>
                                    </a>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a asp-action="Edit" asp-route-id="@product.Id" class="btn btn-primary btn-sm">
                                            <i class="fas fa-edit"></i>
                                        </a>
                                        <a asp-action="Details" asp-route-id="@product.Id" class="btn btn-info btn-sm">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <form asp-action="Delete" asp-route-id="@product.Id" method="post" style="display: inline;">
                                            <button type="button" class="btn btn-danger btn-sm delete-btn" data-id="@product.Id" data-name="@product.Title">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <div class="pagination-container">
        <div class="d-flex justify-content-between align-items-center">
            <div class="pagination-info">
                Page @currentPage of @totalPages
            </div>
            <ul class="pagination pagination-sm mb-0">
                <li class="page-item @(hasPreviousPage ? "" : "disabled")">
                    <a class="page-link" asp-action="Index" 
                       asp-route-page="@(currentPage - 1)" 
                       asp-route-categoryFilter="@categoryFilter"
                       asp-route-search="@searchTerm"
                       tabindex="@(hasPreviousPage ? "" : "-1")" 
                       aria-disabled="@(hasPreviousPage ? "false" : "true")">
                        <i class="fas fa-chevron-left"></i> Previous
                    </a>
                </li>

                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" asp-action="Index" 
                           asp-route-page="@i" 
                           asp-route-categoryFilter="@categoryFilter"
                           asp-route-search="@searchTerm">@i</a>
                    </li>
                }

                <li class="page-item @(hasNextPage ? "" : "disabled")">
                    <a class="page-link" asp-action="Index" 
                       asp-route-page="@(currentPage + 1)" 
                       asp-route-categoryFilter="@categoryFilter"
                       asp-route-search="@searchTerm"
                       tabindex="@(hasNextPage ? "" : "-1")" 
                       aria-disabled="@(hasNextPage ? "false" : "true")">
                        Next <i class="fas fa-chevron-right"></i>
                    </a>
                </li>
            </ul>
        </div>
    </div>

    <div class="pb-3"></div>

    <!-- Description Tooltip Modal -->
    <div id="descriptionTooltip" class="description-tooltip" style="display: none;">
        <div class="tooltip-header">
            <span class="tooltip-title">Full Description</span>
            <button type="button" class="tooltip-close" onclick="hideDescriptionTooltip()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="tooltip-content" id="tooltipContent">
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <div class="mb-4">
            <i class="fas fa-inbox fa-4x text-muted"></i>
        </div>
        <h3 class="text-muted">No Products Found</h3>
        <p class="text-muted mb-4">Start by creating your first product.</p>
        <a asp-action="Create" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create First Product
        </a>
    </div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .description-tooltip {
            position: absolute;
            background: var(--bs-body-bg);
            border: 1px solid var(--bs-border-color);
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            max-width: 400px;
            min-width: 300px;
            font-size: 14px;
        }

        /* Dark mode specific styles */
        [data-theme="dark"] .description-tooltip {
            background: #1a1a1a;
            border-color: #444;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
        }

        .tooltip-header {
            padding: 12px 16px;
            border-bottom: 1px solid var(--bs-border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--bs-secondary-bg);
            border-radius: 7px 7px 0 0;
        }

        /* Dark mode header */
        [data-theme="dark"] .tooltip-header {
            background: #2d2d2d;
            border-bottom-color: #444;
        }

        .tooltip-title {
            font-weight: 600;
            color: var(--bs-body-color);
        }

        /* Dark mode title */
        [data-theme="dark"] .tooltip-title {
            color: #f8f9fa;
        }

        .tooltip-close {
            background: none;
            border: none;
            color: var(--bs-secondary-color);
            cursor: pointer;
            padding: 0;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 3px;
            transition: all 0.2s ease;
        }

        .tooltip-close:hover {
            background: var(--bs-danger);
            color: white;
        }

        /* Dark mode close button */
        [data-theme="dark"] .tooltip-close {
            color: #adb5bd;
        }

        .tooltip-content {
            padding: 16px;
            color: var(--bs-body-color);
            line-height: 1.5;
            max-height: 300px;
            overflow-y: auto;
            word-wrap: break-word;
            overflow-wrap: break-word;
            white-space: pre-wrap;
            hyphens: auto;
        }

        /* Dark mode content */
        [data-theme="dark"] .tooltip-content {
            color: #e9ecef;
        }

        .read-more-btn:hover + .description-tooltip {
            display: block !important;
        }

        /* Search styles */
        .search-container {
            position: relative;
            display: inline-block;
        }

        .search-toggle {
            background: var(--bs-primary);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .search-toggle:hover {
            background: var(--bs-primary);
            opacity: 0.9;
            transform: scale(1.05);
        }

        [data-theme="dark"] .search-toggle {
            background: #4DABF7;
        }

        [data-theme="dark"] .search-toggle:hover {
            background: #4DABF7;
        }

        .search-input {
            position: absolute;
            right: 45px;
            top: 0;
            width: 250px;
            height: 40px;
            border: 2px solid var(--bs-primary);
            border-radius: 8px;
            padding: 0 15px;
            outline: none;
            transition: all 0.3s ease;
            background: var(--bs-body-bg);
            color: var(--bs-body-color);
            opacity: 1;
            z-index: 1;
        }

        .search-input:focus {
            border-color: var(--bs-primary);
            box-shadow: 0 0 0 0.2rem rgba(var(--bs-primary-rgb), 0.25);
        }

        .filter-btn {
            height: 40px;
            min-width: 60px;
            border-radius: 8px !important;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
        }

        .dropdown-menu-themed {
            background: var(--bs-body-bg);
            border: 1px solid var(--bs-border-color);
        }

        .dropdown-menu-themed .dropdown-item {
            color: var(--bs-body-color);
        }

        .dropdown-menu-themed .dropdown-item:hover {
            background: var(--bs-secondary-bg);
        }

        .dropdown-menu-themed .dropdown-item.active {
            background: var(--bs-primary);
            color: white;
        }

        [data-theme="dark"] .search-input {
            background: #2d2d2d;
            color: #f8f9fa;
            border-color: #4DABF7;
        }

        [data-theme="dark"] .dropdown-menu-themed {
            background: #2d2d2d;
            border-color: #444;
        }

        [data-theme="dark"] .dropdown-menu-themed .dropdown-item {
            color: #f8f9fa;
        }

        [data-theme="dark"] .dropdown-menu-themed .dropdown-item:hover {
            background: #3d3d3d;
        }
    </style>
    <script>
        let activeTooltip = null;

        function showDescriptionTooltip(event, description) {
            event.preventDefault();
            
            const tooltip = document.getElementById('descriptionTooltip');
            const content = document.getElementById('tooltipContent');
            const button = event.target;
            
            // Set content
            content.textContent = description;
            
            // Position tooltip
            const buttonRect = button.getBoundingClientRect();
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
            
            // Calculate position (to the right of the button)
            let left = buttonRect.right + scrollLeft + 10;
            let top = buttonRect.top + scrollTop - 10;
            
            // Check if tooltip would go off screen and adjust
            const tooltipWidth = 400; // max-width from CSS
            const tooltipHeight = 200; // estimated height
            
            if (left + tooltipWidth > window.innerWidth + scrollLeft) {
                // Position to the left of the button instead
                left = buttonRect.left + scrollLeft - tooltipWidth - 10;
            }
            
            if (top + tooltipHeight > window.innerHeight + scrollTop) {
                // Position above the button
                top = buttonRect.top + scrollTop - tooltipHeight - 10;
            }
            
            // Ensure tooltip doesn't go off the left edge
            if (left < scrollLeft) {
                left = scrollLeft + 10;
            }
            
            // Ensure tooltip doesn't go off the top
            if (top < scrollTop) {
                top = scrollTop + 10;
            }
            
            tooltip.style.left = left + 'px';
            tooltip.style.top = top + 'px';
            tooltip.style.display = 'block';
            
            activeTooltip = tooltip;
        }

        function hideDescriptionTooltip() {
            const tooltip = document.getElementById('descriptionTooltip');
            tooltip.style.display = 'none';
            activeTooltip = null;
        }

        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const tableRows = document.querySelectorAll('tbody tr');
            let allRowsData = [];

            tableRows.forEach(row => {
                const title = row.cells[0].textContent.trim().toLowerCase();
                const description = row.cells[1].textContent.trim().toLowerCase();
                const author = row.cells[2].textContent.trim().toLowerCase();
                const category = row.cells[4].textContent.trim().toLowerCase();
                
                allRowsData.push({
                    element: row,
                    searchableText: `${title} ${description} ${author} ${category}`
                });
            });

            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.trim().toLowerCase();
                filterTable(searchTerm);
            });

            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                }
            });

            function filterTable(searchTerm) {
                let visibleRows = 0;
                
                allRowsData.forEach(rowData => {
                    if (searchTerm === '' || rowData.searchableText.includes(searchTerm)) {
                        rowData.element.style.display = '';
                        visibleRows++;
                    } else {
                        rowData.element.style.display = 'none';
                    }
                });

                toggleNoResultsMessage(visibleRows === 0 && searchTerm !== '');
                
                const paginationContainer = document.querySelector('.pagination-container');
                if (paginationContainer) {
                    paginationContainer.style.display = searchTerm === '' ? '' : 'none';
                }
            }

            function toggleNoResultsMessage(show) {
                let noResultsRow = document.getElementById('noResultsRow');
                
                if (show && !noResultsRow) {
                    const tbody = document.querySelector('tbody');
                    noResultsRow = document.createElement('tr');
                    noResultsRow.id = 'noResultsRow';
                    noResultsRow.innerHTML = `
                        <td colspan="6" class="text-center py-4 text-muted">
                            <i class="fas fa-search fa-2x mb-2"></i><br>
                            No products found matching your search.
                        </td>
                    `;
                    tbody.appendChild(noResultsRow);
                } else if (!show && noResultsRow) {
                    noResultsRow.remove();
                }
            }

            const urlParams = new URLSearchParams(window.location.search);
            const searchTerm = urlParams.get('search');
            if (searchTerm) {
                searchInput.value = searchTerm;
                filterTable(searchTerm.toLowerCase());
            }
            // Handle read more buttons
            document.querySelectorAll('.read-more-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    const description = this.getAttribute('data-description');
                    showDescriptionTooltip(e, description);
                });
            });

            // Hide tooltip when clicking outside
            document.addEventListener('click', function(e) {
                if (activeTooltip && !activeTooltip.contains(e.target) && !e.target.classList.contains('read-more-btn')) {
                    hideDescriptionTooltip();
                }
            });

            // Handle delete buttons
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const productId = this.getAttribute('data-id');
                    const productName = this.getAttribute('data-name');
                    
                    Swal.fire({
                        title: 'Are you sure?',
                        text: `You are about to delete "${productName}". This action cannot be undone!`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, delete it!',
                        cancelButtonText: 'Cancel'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Submit the form
                            this.closest('form').submit();
                        }
                    });
                });
            });
        });
    </script>
}
